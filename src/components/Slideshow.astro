<div class="container slideshow-container">
    <div class="slide active" id="slide">
        <header>
            <h1>1. Funktioner</h1>
        </header>

        <div class="container desc-container">
            <div class="what" id="what">
                <h2>
                    Hvad er en funktion?
                </h2>
                <p>
                    En overskuelig måde at opdele sin kode på. Denne gør det muligt at genbruge kode, så man i stedet for at skrive de samme linjer kode igen og igen i stedet laver en funktion med de linjer kode og dernæst kalder funktionen.                </p>
            </div>
            <div class="syntax" id="syntax">
                <h2>
                    Syntaks
                </h2>
                <p>
                    En funktion starter altid med <span class="keyword">function</span> efterfulgt af <span class="name">funktionens navn</span>, som er et, du giver den. Derefter følger <span class="parentheses">et sæt parenteser</span>, som derefter følges af <span class="curly-brackets">et sæt tuborgklammer</span>, inde i hvilke <span class="code">den kode</span>, som funktionen skal køre, skrives.
                    <span class="example">Se eksempel <a href="#">her</a>.</span>
                </p>
            </div>
        </div>

        <div class="card preview-card" id="preview_card">
            <h3>
                <pre>
                    <span class="keyword">function</span> <span class="name">myFunction</span><span class="parentheses">()</span>
                    <span class="curly-brackets">&#123;</span>
                    <span class="code">// Kode her</span>
                    <span class="curly-brackets">&#125;</span>
                </pre>
            </h3>
        </div>
    </div>

    <div class="slide" id="slide">
        <header>
            <h1>2. Funktioner</h1>
        </header>

        <div class="container desc-container">
            <div class="what" id="what">
                <h2>
                    Hvad er en funktion?
                </h2>
                <p>
                    En overskuelig måde at opdele sin kode på. Denne gør det muligt at genbruge kode, så man i stedet for at skrive de samme linjer kode igen og igen i stedet laver en funktion med de linjer kode og dernæst kalder funktionen.
                </p>
            </div>
            <div class="syntax" id="syntax">
                <h2>
                    Syntaks
                </h2>
                <p>
                    En funktion starter altid med <span class="keyword">function</span> efterfulgt af <span class="name">funktionens navn</span>, som er et, du giver den. Derefter følger <span class="parentheses">et sæt parenteser</span>, som derefter følges af <span class="curly-brackets">et sæt tuborgklammer</span>, inde i hvilke <span class="code">den kode</span>, som funktionen skal køre, skrives.
                    <span class="example">Se eksempel <a href="#">her</a>.</span>
                </p>
            </div>
        </div>

        <div class="card preview-card" id="preview_card">
            <h3>
                <pre>
                    <span class="keyword">function</span> <span class="name">myFunction</span><span class="parentheses">()</span>
                    <span class="curly-brackets">&#123;</span>
                    <span class="code">// Kode her</span>
                    <span class="curly-brackets">&#125;</span>
                </pre>
            </h3>
        </div>
    </div>

    <div class="container controls-container">
        <i class="fas fa-arrow-left prev-btn" id="prev_btn"></i>
        <i class="fas fa-arrow-right next-btn" id="next_btn"></i>
    </div>
</div>


<style>
    .slide
    {
        opacity: 0;
        pointer-events: none;
        display: none;
        flex-direction: column;
        transition: opacity .4s ease-in;
    }

    .slide.active
    {
        display: flex;
        opacity: 1;
        pointer-events: all;
        transition: opacity .4s ease-in;
    }


    .container.slideshow-container
    {
        position: absolute;
        top: 55%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .container.slideshow-container header h1
    {
        transform: translateX(-27px);
    }

    .container.desc-container
    {
        text-align: left;
    }

    .container.desc-container > div
    {
        margin-top: 20px;
    }

    .container.desc-container > div h2
    {
        margin-bottom: 10px;
    }

    .container.desc-container p
    {
        font-size: 14px;
        width: 120%;
        max-width: 400px;
    }

    .card.preview-card
    {
        display: none;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 20px 40px;
        background-color: var(--preview-card-background-color);
        text-align: left;
        height: 250px;
        margin-top: 20px;

    }

    .card.preview-card .code
    {
        margin-left: 25px;
    }

    .example
    {
        display: inline-block;
    }


    .container.controls-container
    {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
        margin-top: 20px;
        color: #fff;
        display: flex;
        gap: 20px;
        font-size: 20px;
    }

    .container.controls-container i
    {
        cursor: pointer;
        transition: transform .15s ease-in, color .15s ease-in;
    }

    .container.controls-container i:hover
    {
        color: #ff0;
        transition: transform .15s ease-in, color .15s ease-in;
    }

    .container.controls-container i:first-child:hover
    {
        transform: translateX(-2px);
    }

    .container.controls-container i:last-child:hover
    {
        transform: translateX(2px);
    }

    

    @media screen and (min-width: 768px)
    {
        .card.preview-card
        {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .example
        {
            display: none;
        }
    }
</style>

<script>
    const slides = document.querySelectorAll('.slide')
    const prevSlideButton = document.querySelector('#prev_btn')
    const nextSlideButton = document.querySelector('#next_btn')

    // Next Slide
    const nextSlide = () =>
    {
        const activeSlide = document.querySelector('.slide.active')
        activeSlide.classList.remove('active')

        if (activeSlide.nextElementSibling)
        {
            activeSlide.nextElementSibling.classList.add('active')
        }
        else
        {
            slides[0].classList.add('active')
        }
    }

    // Previous Slide
    const prevSlide = () =>
    {
        const activeSlide = document.querySelector('.slide.active')
        activeSlide.classList.remove('active')

        if (activeSlide.previousElementSibling)
        {
            activeSlide.previousElementSibling.classList.add('active')
        }
        else
        {
            slides[slides.length - 1].classList.add('active')
        }
    }

    prevSlideButton.addEventListener('click', prevSlide)
    nextSlideButton.addEventListener('click', prevSlide)
</script>